name: Tests and release

on: [push, pull_request]

permissions: read-all

env:
  CRATE_NAME: ubi
  GITHUB_TOKEN: ${{ github.token }}
  RUST_BACKTRACE: 1

jobs:
  test-matrix:
    name: ${{ matrix.platform.os-name }} with rust ${{ matrix.toolchain }}
    runs-on: ${{ matrix.platform.runs-on }}
    strategy:
      fail-fast: false
      matrix:
        platform:
          # Platforms that don't work:
          #
          # - sparc64-unknown-linux-gnu - cannot compile openssl-sys
          # - x86_64-unknown-illumos - weird error compiling openssl - "bin/sh: 1: granlib: not found"

          - os-name: FreeBSD-x86_64
            runs-on: ubuntu-24.04
            target: x86_64-unknown-freebsd
            skip-tests: true
          - os-name: Linux-x86_64
            runs-on: ubuntu-24.04
            target: x86_64-unknown-linux-musl
          - os-name: Linux-x86_64 (rustls-native-roots)
            runs-on: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            features: rustls-tls-native-roots
          - os-name: Linux-x86_64 (native-tls)
            runs-on: ubuntu-24.04
            # We need to use gnu or we cannot link against openssl.
            target: x86_64-unknown-linux-gnu
            features: native-tls
          - os-name: Linux-x86_64 (native-tls-vendored)
            runs-on: ubuntu-24.04
            target: x86_64-unknown-linux-musl
            features: native-tls-vendored
          - os-name: Linux-aarch64
            runs-on: ubuntu-24.04
            target: aarch64-unknown-linux-musl
          - os-name: Linux-arm
            runs-on: ubuntu-24.04
            target: arm-unknown-linux-musleabi
          - os-name: Linux-i686
            runs-on: ubuntu-24.04
            target: i686-unknown-linux-musl
            skip-tests: true
          - os-name: Linux-powerpc
            runs-on: ubuntu-24.04
            target: powerpc-unknown-linux-gnu
            skip-tests: true
          - os-name: Linux-powerpc64
            runs-on: ubuntu-24.04
            target: powerpc64-unknown-linux-gnu
            skip-tests: true
          - os-name: Linux-powerpc64le
            runs-on: ubuntu-24.04
            target: powerpc64le-unknown-linux-gnu
            skip-tests: true
          - os-name: Linux-riscv64
            runs-on: ubuntu-24.04
            target: riscv64gc-unknown-linux-gnu
          - os-name: Linux-s390x
            runs-on: ubuntu-24.04
            target: s390x-unknown-linux-gnu
            skip-tests: true
          - os-name: NetBSD-x86_64
            runs-on: ubuntu-24.04
            target: x86_64-unknown-netbsd
            skip-tests: true
          - os-name: Windows-aarch64
            runs-on: windows-latest
            target: aarch64-pc-windows-msvc
            skip-tests: true
          - os-name: Windows-i686
            runs-on: windows-latest
            target: i686-pc-windows-msvc
            skip-tests: true
          - os-name: Windows-x86_64
            runs-on: windows-latest
            target: x86_64-pc-windows-msvc
          - os-name: macOS-x86_64
            runs-on: macOS-latest
            target: x86_64-apple-darwin
          - os-name: macOS-aarch64
            runs-on: macOS-latest
            target: aarch64-apple-darwin
        toolchain:
          - stable
        include:
          - platform:
              os-name: Linux-x86_64
              runs-on: ubuntu-24.04
              target: x86_64-unknown-linux-musl
              bin: ubi
            toolchain: beta
          - platform:
              os-name: Linux-x86_64
              runs-on: ubuntu-24.04
              target: x86_64-unknown-linux-musl
              bin: ubi
            toolchain: nightly
    steps:
      - uses: actions/checkout@v4
      - name: Set "--features" flag value
        id: set-features-flag-value
        shell: bash
        run: |
          if [ -n "${{ matrix.platform.features }}" ]; then
              echo "features=${{ matrix.platform.features }}" >> "$GITHUB_OUTPUT"
          else 
              echo "features=default" >> "$GITHUB_OUTPUT"
          fi
          cat "$GITHUB_OUTPUT"
      - name: Maybe install SSL packages
        run: sudo apt-get update --yes && sudo apt-get install --yes pkg-config openssl libssl-dev
        if: matrix.platform.features == 'native-tls'
      - name: Build binary
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: "build"
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args:
            "--locked --release --features ${{ steps.set-features-flag-value.outputs.features }}"
          strip: true
      - name: Run tests
        uses: houseabsolute/actions-rust-cross@v1
        with:
          command: "test"
          target: ${{ matrix.platform.target }}
          toolchain: ${{ matrix.toolchain }}
          args:
            "--locked --release  --features ${{ steps.set-features-flag-value.outputs.features }}"
        if: ${{ !matrix.platform.skip-tests }}
      - name: Publish artifacts and release
        uses: houseabsolute/actions-rust-release@v0
        with:
          executable-name: ubi
          target: ${{ matrix.platform.target }}
          action-gh-release-parameters: '{ "make_latest": false }'
        if: matrix.toolchain == 'stable' && matrix.platform.features == ''

  test-alpine:
    name: Alpine Linux
    runs-on: ubuntu-24.04
    container:
      image: rust:alpine
      env:
        GITHUB_TOKEN: ${{ github.token }}
      volumes:
        - "${{ github.workspace }}:/workspace"
      options: "--workdir /workspace"
    steps:
      - uses: actions/checkout@v4
      - name: Install packages on Alpine
        shell: sh
        run: |
          apk update
          # file is used in an integration test
          apk add file musl-dev zstd-dev
      - name: Run tests
        shell: sh
        run: cargo test --locked

  msrv:
    name: Verify MSRV
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - name: Install cargo-msrv
        run: |
          cargo run -p ubi-cli -- --project foresterre/cargo-msrv --in ..
      - name: Verify MSRV
        run: |
          cd ubi
          PATH=../../:"$PATH" cargo msrv verify
